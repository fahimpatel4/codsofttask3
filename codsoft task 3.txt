import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

df = pd.read_csv(r'C:\Users\itsfa\Downloads\advertising.csv')

print(df.head())
print(df.describe())
print(df.info())

df.columns = df.columns.str.strip()

print("Columns:", df.columns)
print(df.head())

df = df.dropna()  
df = pd.get_dummies(df, drop_first=True)  


try:
    X = df.drop('Sales', axis=1).values  
    y = df['Sales'].values  
except KeyError as e:
    print(f"Error: {e}")
    print("Available columns:", df.columns)
    exit()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted', alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Ideal Fit')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.legend()
plt.grid(True)
plt.show()

results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(results)